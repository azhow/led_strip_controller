// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: audio_capture_service.proto

#include "audio_capture_service.pb.h"
#include "audio_capture_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* AudioCapture_method_names[] = {
  "/AudioCapture/StartCapture",
  "/AudioCapture/StopCapture",
  "/AudioCapture/Status",
  "/AudioCapture/Shutdown",
};

std::unique_ptr< AudioCapture::Stub> AudioCapture::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AudioCapture::Stub> stub(new AudioCapture::Stub(channel, options));
  return stub;
}

AudioCapture::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StartCapture_(AudioCapture_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StopCapture_(AudioCapture_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Status_(AudioCapture_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Shutdown_(AudioCapture_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::AudioPacket>* AudioCapture::Stub::StartCaptureRaw(::grpc::ClientContext* context, const ::ProcessToCapture& request) {
  return ::grpc::internal::ClientReaderFactory< ::AudioPacket>::Create(channel_.get(), rpcmethod_StartCapture_, context, request);
}

void AudioCapture::Stub::async::StartCapture(::grpc::ClientContext* context, const ::ProcessToCapture* request, ::grpc::ClientReadReactor< ::AudioPacket>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::AudioPacket>::Create(stub_->channel_.get(), stub_->rpcmethod_StartCapture_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::AudioPacket>* AudioCapture::Stub::AsyncStartCaptureRaw(::grpc::ClientContext* context, const ::ProcessToCapture& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::AudioPacket>::Create(channel_.get(), cq, rpcmethod_StartCapture_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::AudioPacket>* AudioCapture::Stub::PrepareAsyncStartCaptureRaw(::grpc::ClientContext* context, const ::ProcessToCapture& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::AudioPacket>::Create(channel_.get(), cq, rpcmethod_StartCapture_, context, request, false, nullptr);
}

::grpc::Status AudioCapture::Stub::StopCapture(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopCapture_, context, request, response);
}

void AudioCapture::Stub::async::StopCapture(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopCapture_, context, request, response, std::move(f));
}

void AudioCapture::Stub::async::StopCapture(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopCapture_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* AudioCapture::Stub::PrepareAsyncStopCaptureRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopCapture_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* AudioCapture::Stub::AsyncStopCaptureRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopCaptureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AudioCapture::Stub::Status(::grpc::ClientContext* context, const ::Empty& request, ::Availability* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::Availability, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Status_, context, request, response);
}

void AudioCapture::Stub::async::Status(::grpc::ClientContext* context, const ::Empty* request, ::Availability* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::Availability, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void AudioCapture::Stub::async::Status(::grpc::ClientContext* context, const ::Empty* request, ::Availability* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Availability>* AudioCapture::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Availability, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Availability>* AudioCapture::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AudioCapture::Stub::Shutdown(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

void AudioCapture::Stub::async::Shutdown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void AudioCapture::Stub::async::Shutdown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* AudioCapture::Stub::PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Shutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* AudioCapture::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

AudioCapture::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioCapture_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AudioCapture::Service, ::ProcessToCapture, ::AudioPacket>(
          [](AudioCapture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ProcessToCapture* req,
             ::grpc::ServerWriter<::AudioPacket>* writer) {
               return service->StartCapture(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioCapture_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioCapture::Service, ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioCapture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::Empty* resp) {
               return service->StopCapture(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioCapture_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioCapture::Service, ::Empty, ::Availability, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioCapture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::Availability* resp) {
               return service->Status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioCapture_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioCapture::Service, ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioCapture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::Empty* resp) {
               return service->Shutdown(ctx, req, resp);
             }, this)));
}

AudioCapture::Service::~Service() {
}

::grpc::Status AudioCapture::Service::StartCapture(::grpc::ServerContext* context, const ::ProcessToCapture* request, ::grpc::ServerWriter< ::AudioPacket>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioCapture::Service::StopCapture(::grpc::ServerContext* context, const ::Empty* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioCapture::Service::Status(::grpc::ServerContext* context, const ::Empty* request, ::Availability* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioCapture::Service::Shutdown(::grpc::ServerContext* context, const ::Empty* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


