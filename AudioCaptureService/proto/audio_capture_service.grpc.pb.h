// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: audio_capture_service.proto
#ifndef GRPC_audio_5fcapture_5fservice_2eproto__INCLUDED
#define GRPC_audio_5fcapture_5fservice_2eproto__INCLUDED

#include "audio_capture_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace AudioService {

// The greeting service definition.
class AudioCapturer final {
 public:
  static constexpr char const* service_full_name() {
    return "AudioService.AudioCapturer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::AudioService::AudioPacket>> StartCapture(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::AudioService::AudioPacket>>(StartCaptureRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::AudioService::AudioPacket>> AsyncStartCapture(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::AudioService::AudioPacket>>(AsyncStartCaptureRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::AudioService::AudioPacket>> PrepareAsyncStartCapture(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::AudioService::AudioPacket>>(PrepareAsyncStartCaptureRaw(context, request, cq));
    }
    virtual ::grpc::Status StopCapture(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::AudioService::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Empty>> AsyncStopCapture(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Empty>>(AsyncStopCaptureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Empty>> PrepareAsyncStopCapture(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Empty>>(PrepareAsyncStopCaptureRaw(context, request, cq));
    }
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::AudioService::Availability* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Availability>> AsyncStatus(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Availability>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Availability>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Availability>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::AudioService::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Empty>> AsyncShutdown(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Empty>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Empty>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Empty>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void StartCapture(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture* request, ::grpc::ClientReadReactor< ::AudioService::AudioPacket>* reactor) = 0;
      virtual void StopCapture(::grpc::ClientContext* context, const ::AudioService::Empty* request, ::AudioService::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopCapture(::grpc::ClientContext* context, const ::AudioService::Empty* request, ::AudioService::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Status(::grpc::ClientContext* context, const ::AudioService::Empty* request, ::AudioService::Availability* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Status(::grpc::ClientContext* context, const ::AudioService::Empty* request, ::AudioService::Availability* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::AudioService::Empty* request, ::AudioService::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::AudioService::Empty* request, ::AudioService::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::AudioService::AudioPacket>* StartCaptureRaw(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::AudioService::AudioPacket>* AsyncStartCaptureRaw(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::AudioService::AudioPacket>* PrepareAsyncStartCaptureRaw(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Empty>* AsyncStopCaptureRaw(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Empty>* PrepareAsyncStopCaptureRaw(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Availability>* AsyncStatusRaw(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Availability>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Empty>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AudioService::Empty>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::AudioService::AudioPacket>> StartCapture(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::AudioService::AudioPacket>>(StartCaptureRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::AudioService::AudioPacket>> AsyncStartCapture(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::AudioService::AudioPacket>>(AsyncStartCaptureRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::AudioService::AudioPacket>> PrepareAsyncStartCapture(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::AudioService::AudioPacket>>(PrepareAsyncStartCaptureRaw(context, request, cq));
    }
    ::grpc::Status StopCapture(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::AudioService::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AudioService::Empty>> AsyncStopCapture(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AudioService::Empty>>(AsyncStopCaptureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AudioService::Empty>> PrepareAsyncStopCapture(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AudioService::Empty>>(PrepareAsyncStopCaptureRaw(context, request, cq));
    }
    ::grpc::Status Status(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::AudioService::Availability* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AudioService::Availability>> AsyncStatus(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AudioService::Availability>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AudioService::Availability>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AudioService::Availability>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::AudioService::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AudioService::Empty>> AsyncShutdown(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AudioService::Empty>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AudioService::Empty>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AudioService::Empty>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StartCapture(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture* request, ::grpc::ClientReadReactor< ::AudioService::AudioPacket>* reactor) override;
      void StopCapture(::grpc::ClientContext* context, const ::AudioService::Empty* request, ::AudioService::Empty* response, std::function<void(::grpc::Status)>) override;
      void StopCapture(::grpc::ClientContext* context, const ::AudioService::Empty* request, ::AudioService::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Status(::grpc::ClientContext* context, const ::AudioService::Empty* request, ::AudioService::Availability* response, std::function<void(::grpc::Status)>) override;
      void Status(::grpc::ClientContext* context, const ::AudioService::Empty* request, ::AudioService::Availability* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Shutdown(::grpc::ClientContext* context, const ::AudioService::Empty* request, ::AudioService::Empty* response, std::function<void(::grpc::Status)>) override;
      void Shutdown(::grpc::ClientContext* context, const ::AudioService::Empty* request, ::AudioService::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::AudioService::AudioPacket>* StartCaptureRaw(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture& request) override;
    ::grpc::ClientAsyncReader< ::AudioService::AudioPacket>* AsyncStartCaptureRaw(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::AudioService::AudioPacket>* PrepareAsyncStartCaptureRaw(::grpc::ClientContext* context, const ::AudioService::ProcessToCapture& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AudioService::Empty>* AsyncStopCaptureRaw(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AudioService::Empty>* PrepareAsyncStopCaptureRaw(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AudioService::Availability>* AsyncStatusRaw(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AudioService::Availability>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AudioService::Empty>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AudioService::Empty>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::AudioService::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartCapture_;
    const ::grpc::internal::RpcMethod rpcmethod_StopCapture_;
    const ::grpc::internal::RpcMethod rpcmethod_Status_;
    const ::grpc::internal::RpcMethod rpcmethod_Shutdown_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StartCapture(::grpc::ServerContext* context, const ::AudioService::ProcessToCapture* request, ::grpc::ServerWriter< ::AudioService::AudioPacket>* writer);
    virtual ::grpc::Status StopCapture(::grpc::ServerContext* context, const ::AudioService::Empty* request, ::AudioService::Empty* response);
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::AudioService::Empty* request, ::AudioService::Availability* response);
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::AudioService::Empty* request, ::AudioService::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartCapture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartCapture() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartCapture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartCapture(::grpc::ServerContext* /*context*/, const ::AudioService::ProcessToCapture* /*request*/, ::grpc::ServerWriter< ::AudioService::AudioPacket>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartCapture(::grpc::ServerContext* context, ::AudioService::ProcessToCapture* request, ::grpc::ServerAsyncWriter< ::AudioService::AudioPacket>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopCapture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopCapture() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopCapture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopCapture(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopCapture(::grpc::ServerContext* context, ::AudioService::Empty* request, ::grpc::ServerAsyncResponseWriter< ::AudioService::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Availability* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::AudioService::Empty* request, ::grpc::ServerAsyncResponseWriter< ::AudioService::Availability>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::AudioService::Empty* request, ::grpc::ServerAsyncResponseWriter< ::AudioService::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartCapture<WithAsyncMethod_StopCapture<WithAsyncMethod_Status<WithAsyncMethod_Shutdown<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StartCapture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartCapture() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::AudioService::ProcessToCapture, ::AudioService::AudioPacket>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::AudioService::ProcessToCapture* request) { return this->StartCapture(context, request); }));
    }
    ~WithCallbackMethod_StartCapture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartCapture(::grpc::ServerContext* /*context*/, const ::AudioService::ProcessToCapture* /*request*/, ::grpc::ServerWriter< ::AudioService::AudioPacket>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::AudioService::AudioPacket>* StartCapture(
      ::grpc::CallbackServerContext* /*context*/, const ::AudioService::ProcessToCapture* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopCapture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopCapture() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::AudioService::Empty, ::AudioService::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::AudioService::Empty* request, ::AudioService::Empty* response) { return this->StopCapture(context, request, response); }));}
    void SetMessageAllocatorFor_StopCapture(
        ::grpc::MessageAllocator< ::AudioService::Empty, ::AudioService::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::AudioService::Empty, ::AudioService::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopCapture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopCapture(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopCapture(
      ::grpc::CallbackServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Status() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::AudioService::Empty, ::AudioService::Availability>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::AudioService::Empty* request, ::AudioService::Availability* response) { return this->Status(context, request, response); }));}
    void SetMessageAllocatorFor_Status(
        ::grpc::MessageAllocator< ::AudioService::Empty, ::AudioService::Availability>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::AudioService::Empty, ::AudioService::Availability>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Availability* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Availability* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Shutdown() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::AudioService::Empty, ::AudioService::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::AudioService::Empty* request, ::AudioService::Empty* response) { return this->Shutdown(context, request, response); }));}
    void SetMessageAllocatorFor_Shutdown(
        ::grpc::MessageAllocator< ::AudioService::Empty, ::AudioService::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::AudioService::Empty, ::AudioService::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StartCapture<WithCallbackMethod_StopCapture<WithCallbackMethod_Status<WithCallbackMethod_Shutdown<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartCapture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartCapture() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartCapture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartCapture(::grpc::ServerContext* /*context*/, const ::AudioService::ProcessToCapture* /*request*/, ::grpc::ServerWriter< ::AudioService::AudioPacket>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopCapture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopCapture() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopCapture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopCapture(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Availability* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartCapture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartCapture() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartCapture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartCapture(::grpc::ServerContext* /*context*/, const ::AudioService::ProcessToCapture* /*request*/, ::grpc::ServerWriter< ::AudioService::AudioPacket>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartCapture(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopCapture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopCapture() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StopCapture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopCapture(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopCapture(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Status() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Availability* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Shutdown() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartCapture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartCapture() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StartCapture(context, request); }));
    }
    ~WithRawCallbackMethod_StartCapture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartCapture(::grpc::ServerContext* /*context*/, const ::AudioService::ProcessToCapture* /*request*/, ::grpc::ServerWriter< ::AudioService::AudioPacket>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StartCapture(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopCapture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopCapture() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopCapture(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopCapture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopCapture(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopCapture(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Status() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Status(context, request, response); }));
    }
    ~WithRawCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Availability* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Shutdown() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Shutdown(context, request, response); }));
    }
    ~WithRawCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopCapture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopCapture() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AudioService::Empty, ::AudioService::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::AudioService::Empty, ::AudioService::Empty>* streamer) {
                       return this->StreamedStopCapture(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopCapture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopCapture(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopCapture(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AudioService::Empty,::AudioService::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AudioService::Empty, ::AudioService::Availability>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::AudioService::Empty, ::AudioService::Availability>* streamer) {
                       return this->StreamedStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Availability* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AudioService::Empty,::AudioService::Availability>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AudioService::Empty, ::AudioService::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::AudioService::Empty, ::AudioService::Empty>* streamer) {
                       return this->StreamedShutdown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::AudioService::Empty* /*request*/, ::AudioService::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AudioService::Empty,::AudioService::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StopCapture<WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_Shutdown<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StartCapture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StartCapture() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::AudioService::ProcessToCapture, ::AudioService::AudioPacket>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::AudioService::ProcessToCapture, ::AudioService::AudioPacket>* streamer) {
                       return this->StreamedStartCapture(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StartCapture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartCapture(::grpc::ServerContext* /*context*/, const ::AudioService::ProcessToCapture* /*request*/, ::grpc::ServerWriter< ::AudioService::AudioPacket>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStartCapture(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::AudioService::ProcessToCapture,::AudioService::AudioPacket>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StartCapture<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_StartCapture<WithStreamedUnaryMethod_StopCapture<WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_Shutdown<Service > > > > StreamedService;
};

}  // namespace AudioService


#endif  // GRPC_audio_5fcapture_5fservice_2eproto__INCLUDED
