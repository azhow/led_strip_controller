// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio_capture_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_audio_5fcapture_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_audio_5fcapture_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_audio_5fcapture_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_audio_5fcapture_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_audio_5fcapture_5fservice_2eproto;
class AudioPacket;
struct AudioPacketDefaultTypeInternal;
extern AudioPacketDefaultTypeInternal _AudioPacket_default_instance_;
class Availability;
struct AvailabilityDefaultTypeInternal;
extern AvailabilityDefaultTypeInternal _Availability_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class ProcessToCapture;
struct ProcessToCaptureDefaultTypeInternal;
extern ProcessToCaptureDefaultTypeInternal _ProcessToCapture_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AudioPacket* Arena::CreateMaybeMessage<::AudioPacket>(Arena*);
template<> ::Availability* Arena::CreateMaybeMessage<::Availability>(Arena*);
template<> ::Empty* Arena::CreateMaybeMessage<::Empty>(Arena*);
template<> ::ProcessToCapture* Arena::CreateMaybeMessage<::ProcessToCapture>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum AvailabilityStatus : int {
  AVAILABLE = 0,
  UNAVAILABLE = 1,
  AvailabilityStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AvailabilityStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AvailabilityStatus_IsValid(int value);
constexpr AvailabilityStatus AvailabilityStatus_MIN = AVAILABLE;
constexpr AvailabilityStatus AvailabilityStatus_MAX = UNAVAILABLE;
constexpr int AvailabilityStatus_ARRAYSIZE = AvailabilityStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvailabilityStatus_descriptor();
template<typename T>
inline const std::string& AvailabilityStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AvailabilityStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AvailabilityStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AvailabilityStatus_descriptor(), enum_t_value);
}
inline bool AvailabilityStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AvailabilityStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AvailabilityStatus>(
    AvailabilityStatus_descriptor(), name, value);
}
// ===================================================================

class ProcessToCapture final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessToCapture) */ {
 public:
  inline ProcessToCapture() : ProcessToCapture(nullptr) {}
  ~ProcessToCapture() override;
  explicit PROTOBUF_CONSTEXPR ProcessToCapture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessToCapture(const ProcessToCapture& from);
  ProcessToCapture(ProcessToCapture&& from) noexcept
    : ProcessToCapture() {
    *this = ::std::move(from);
  }

  inline ProcessToCapture& operator=(const ProcessToCapture& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessToCapture& operator=(ProcessToCapture&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessToCapture& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessToCapture* internal_default_instance() {
    return reinterpret_cast<const ProcessToCapture*>(
               &_ProcessToCapture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessToCapture& a, ProcessToCapture& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessToCapture* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessToCapture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessToCapture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessToCapture>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessToCapture& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessToCapture& from) {
    ProcessToCapture::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessToCapture* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessToCapture";
  }
  protected:
  explicit ProcessToCapture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessToCapture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audio_5fcapture_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AudioPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AudioPacket) */ {
 public:
  inline AudioPacket() : AudioPacket(nullptr) {}
  ~AudioPacket() override;
  explicit PROTOBUF_CONSTEXPR AudioPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioPacket(const AudioPacket& from);
  AudioPacket(AudioPacket&& from) noexcept
    : AudioPacket() {
    *this = ::std::move(from);
  }

  inline AudioPacket& operator=(const AudioPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioPacket& operator=(AudioPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioPacket* internal_default_instance() {
    return reinterpret_cast<const AudioPacket*>(
               &_AudioPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AudioPacket& a, AudioPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AudioPacket& from) {
    AudioPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AudioPacket";
  }
  protected:
  explicit AudioPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapturedAudioFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kNumFramesFieldNumber = 2,
  };
  // bytes captured_audio = 3;
  void clear_captured_audio();
  const std::string& captured_audio() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_captured_audio(ArgT0&& arg0, ArgT... args);
  std::string* mutable_captured_audio();
  PROTOBUF_NODISCARD std::string* release_captured_audio();
  void set_allocated_captured_audio(std::string* captured_audio);
  private:
  const std::string& _internal_captured_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captured_audio(const std::string& value);
  std::string* _internal_mutable_captured_audio();
  public:

  // uint64 timestamp = 1;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // uint32 num_frames = 2;
  void clear_num_frames();
  uint32_t num_frames() const;
  void set_num_frames(uint32_t value);
  private:
  uint32_t _internal_num_frames() const;
  void _internal_set_num_frames(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AudioPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captured_audio_;
    uint64_t timestamp_;
    uint32_t num_frames_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audio_5fcapture_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Availability final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Availability) */ {
 public:
  inline Availability() : Availability(nullptr) {}
  ~Availability() override;
  explicit PROTOBUF_CONSTEXPR Availability(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Availability(const Availability& from);
  Availability(Availability&& from) noexcept
    : Availability() {
    *this = ::std::move(from);
  }

  inline Availability& operator=(const Availability& from) {
    CopyFrom(from);
    return *this;
  }
  inline Availability& operator=(Availability&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Availability& default_instance() {
    return *internal_default_instance();
  }
  static inline const Availability* internal_default_instance() {
    return reinterpret_cast<const Availability*>(
               &_Availability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Availability& a, Availability& b) {
    a.Swap(&b);
  }
  inline void Swap(Availability* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Availability* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Availability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Availability>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Availability& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Availability& from) {
    Availability::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Availability* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Availability";
  }
  protected:
  explicit Availability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .AvailabilityStatus status = 1;
  void clear_status();
  ::AvailabilityStatus status() const;
  void set_status(::AvailabilityStatus value);
  private:
  ::AvailabilityStatus _internal_status() const;
  void _internal_set_status(::AvailabilityStatus value);
  public:

  // @@protoc_insertion_point(class_scope:Availability)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audio_5fcapture_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_audio_5fcapture_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessToCapture

// uint32 pid = 1;
inline void ProcessToCapture::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t ProcessToCapture::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t ProcessToCapture::pid() const {
  // @@protoc_insertion_point(field_get:ProcessToCapture.pid)
  return _internal_pid();
}
inline void ProcessToCapture::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void ProcessToCapture::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ProcessToCapture.pid)
}

// -------------------------------------------------------------------

// AudioPacket

// uint64 timestamp = 1;
inline void AudioPacket::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t AudioPacket::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t AudioPacket::timestamp() const {
  // @@protoc_insertion_point(field_get:AudioPacket.timestamp)
  return _internal_timestamp();
}
inline void AudioPacket::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void AudioPacket::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:AudioPacket.timestamp)
}

// uint32 num_frames = 2;
inline void AudioPacket::clear_num_frames() {
  _impl_.num_frames_ = 0u;
}
inline uint32_t AudioPacket::_internal_num_frames() const {
  return _impl_.num_frames_;
}
inline uint32_t AudioPacket::num_frames() const {
  // @@protoc_insertion_point(field_get:AudioPacket.num_frames)
  return _internal_num_frames();
}
inline void AudioPacket::_internal_set_num_frames(uint32_t value) {
  
  _impl_.num_frames_ = value;
}
inline void AudioPacket::set_num_frames(uint32_t value) {
  _internal_set_num_frames(value);
  // @@protoc_insertion_point(field_set:AudioPacket.num_frames)
}

// bytes captured_audio = 3;
inline void AudioPacket::clear_captured_audio() {
  _impl_.captured_audio_.ClearToEmpty();
}
inline const std::string& AudioPacket::captured_audio() const {
  // @@protoc_insertion_point(field_get:AudioPacket.captured_audio)
  return _internal_captured_audio();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AudioPacket::set_captured_audio(ArgT0&& arg0, ArgT... args) {
 
 _impl_.captured_audio_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AudioPacket.captured_audio)
}
inline std::string* AudioPacket::mutable_captured_audio() {
  std::string* _s = _internal_mutable_captured_audio();
  // @@protoc_insertion_point(field_mutable:AudioPacket.captured_audio)
  return _s;
}
inline const std::string& AudioPacket::_internal_captured_audio() const {
  return _impl_.captured_audio_.Get();
}
inline void AudioPacket::_internal_set_captured_audio(const std::string& value) {
  
  _impl_.captured_audio_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioPacket::_internal_mutable_captured_audio() {
  
  return _impl_.captured_audio_.Mutable(GetArenaForAllocation());
}
inline std::string* AudioPacket::release_captured_audio() {
  // @@protoc_insertion_point(field_release:AudioPacket.captured_audio)
  return _impl_.captured_audio_.Release();
}
inline void AudioPacket::set_allocated_captured_audio(std::string* captured_audio) {
  if (captured_audio != nullptr) {
    
  } else {
    
  }
  _impl_.captured_audio_.SetAllocated(captured_audio, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captured_audio_.IsDefault()) {
    _impl_.captured_audio_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AudioPacket.captured_audio)
}

// -------------------------------------------------------------------

// Availability

// .AvailabilityStatus status = 1;
inline void Availability::clear_status() {
  _impl_.status_ = 0;
}
inline ::AvailabilityStatus Availability::_internal_status() const {
  return static_cast< ::AvailabilityStatus >(_impl_.status_);
}
inline ::AvailabilityStatus Availability::status() const {
  // @@protoc_insertion_point(field_get:Availability.status)
  return _internal_status();
}
inline void Availability::_internal_set_status(::AvailabilityStatus value) {
  
  _impl_.status_ = value;
}
inline void Availability::set_status(::AvailabilityStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Availability.status)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AvailabilityStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AvailabilityStatus>() {
  return ::AvailabilityStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_audio_5fcapture_5fservice_2eproto
