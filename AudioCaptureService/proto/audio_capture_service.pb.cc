// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio_capture_service.proto

#include "audio_capture_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ProcessToCapture::ProcessToCapture(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessToCaptureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessToCaptureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessToCaptureDefaultTypeInternal() {}
  union {
    ProcessToCapture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessToCaptureDefaultTypeInternal _ProcessToCapture_default_instance_;
PROTOBUF_CONSTEXPR AudioPacket::AudioPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.captured_audio_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.num_frames_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AudioPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioPacketDefaultTypeInternal() {}
  union {
    AudioPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioPacketDefaultTypeInternal _AudioPacket_default_instance_;
PROTOBUF_CONSTEXPR Availability::Availability(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AvailabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvailabilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvailabilityDefaultTypeInternal() {}
  union {
    Availability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvailabilityDefaultTypeInternal _Availability_default_instance_;
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
static ::_pb::Metadata file_level_metadata_audio_5fcapture_5fservice_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_audio_5fcapture_5fservice_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_audio_5fcapture_5fservice_2eproto = nullptr;

const uint32_t TableStruct_audio_5fcapture_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessToCapture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProcessToCapture, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AudioPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AudioPacket, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::AudioPacket, _impl_.num_frames_),
  PROTOBUF_FIELD_OFFSET(::AudioPacket, _impl_.captured_audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Availability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Availability, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ProcessToCapture)},
  { 7, -1, -1, sizeof(::AudioPacket)},
  { 16, -1, -1, sizeof(::Availability)},
  { 23, -1, -1, sizeof(::Empty)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ProcessToCapture_default_instance_._instance,
  &::_AudioPacket_default_instance_._instance,
  &::_Availability_default_instance_._instance,
  &::_Empty_default_instance_._instance,
};

const char descriptor_table_protodef_audio_5fcapture_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033audio_capture_service.proto\"\037\n\020Process"
  "ToCapture\022\013\n\003pid\030\001 \001(\r\"L\n\013AudioPacket\022\021\n"
  "\ttimestamp\030\001 \001(\004\022\022\n\nnum_frames\030\002 \001(\r\022\026\n\016"
  "captured_audio\030\003 \001(\014\"3\n\014Availability\022#\n\006"
  "status\030\001 \001(\0162\023.AvailabilityStatus\"\007\n\005Emp"
  "ty*4\n\022AvailabilityStatus\022\r\n\tAVAILABLE\020\000\022"
  "\017\n\013UNAVAILABLE\020\0012\235\001\n\014AudioCapture\0221\n\014Sta"
  "rtCapture\022\021.ProcessToCapture\032\014.AudioPack"
  "et0\001\022\035\n\013StopCapture\022\006.Empty\032\006.Empty\022\037\n\006S"
  "tatus\022\006.Empty\032\r.Availability\022\032\n\010Shutdown"
  "\022\006.Empty\032\006.Emptyb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_audio_5fcapture_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_audio_5fcapture_5fservice_2eproto = {
    false, false, 424, descriptor_table_protodef_audio_5fcapture_5fservice_2eproto,
    "audio_capture_service.proto",
    &descriptor_table_audio_5fcapture_5fservice_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_audio_5fcapture_5fservice_2eproto::offsets,
    file_level_metadata_audio_5fcapture_5fservice_2eproto, file_level_enum_descriptors_audio_5fcapture_5fservice_2eproto,
    file_level_service_descriptors_audio_5fcapture_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_audio_5fcapture_5fservice_2eproto_getter() {
  return &descriptor_table_audio_5fcapture_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_audio_5fcapture_5fservice_2eproto(&descriptor_table_audio_5fcapture_5fservice_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvailabilityStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_audio_5fcapture_5fservice_2eproto);
  return file_level_enum_descriptors_audio_5fcapture_5fservice_2eproto[0];
}
bool AvailabilityStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ProcessToCapture::_Internal {
 public:
};

ProcessToCapture::ProcessToCapture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProcessToCapture)
}
ProcessToCapture::ProcessToCapture(const ProcessToCapture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessToCapture* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:ProcessToCapture)
}

inline void ProcessToCapture::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProcessToCapture::~ProcessToCapture() {
  // @@protoc_insertion_point(destructor:ProcessToCapture)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessToCapture::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProcessToCapture::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessToCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessToCapture)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessToCapture::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessToCapture::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessToCapture)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessToCapture)
  return target;
}

size_t ProcessToCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessToCapture)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessToCapture::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessToCapture::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessToCapture::GetClassData() const { return &_class_data_; }


void ProcessToCapture::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessToCapture*>(&to_msg);
  auto& from = static_cast<const ProcessToCapture&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProcessToCapture)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessToCapture::CopyFrom(const ProcessToCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessToCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessToCapture::IsInitialized() const {
  return true;
}

void ProcessToCapture::InternalSwap(ProcessToCapture* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessToCapture::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_audio_5fcapture_5fservice_2eproto_getter, &descriptor_table_audio_5fcapture_5fservice_2eproto_once,
      file_level_metadata_audio_5fcapture_5fservice_2eproto[0]);
}

// ===================================================================

class AudioPacket::_Internal {
 public:
};

AudioPacket::AudioPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AudioPacket)
}
AudioPacket::AudioPacket(const AudioPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.captured_audio_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.num_frames_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.captured_audio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.captured_audio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_captured_audio().empty()) {
    _this->_impl_.captured_audio_.Set(from._internal_captured_audio(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_frames_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.num_frames_));
  // @@protoc_insertion_point(copy_constructor:AudioPacket)
}

inline void AudioPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.captured_audio_){}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.num_frames_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.captured_audio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.captured_audio_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AudioPacket::~AudioPacket() {
  // @@protoc_insertion_point(destructor:AudioPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.captured_audio_.Destroy();
}

void AudioPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:AudioPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.captured_audio_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_frames_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.num_frames_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes captured_audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_captured_audio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AudioPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint32 num_frames = 2;
  if (this->_internal_num_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_frames(), target);
  }

  // bytes captured_audio = 3;
  if (!this->_internal_captured_audio().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_captured_audio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AudioPacket)
  return target;
}

size_t AudioPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AudioPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes captured_audio = 3;
  if (!this->_internal_captured_audio().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_captured_audio());
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 num_frames = 2;
  if (this->_internal_num_frames() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_frames());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioPacket::GetClassData() const { return &_class_data_; }


void AudioPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioPacket*>(&to_msg);
  auto& from = static_cast<const AudioPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AudioPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_captured_audio().empty()) {
    _this->_internal_set_captured_audio(from._internal_captured_audio());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_num_frames() != 0) {
    _this->_internal_set_num_frames(from._internal_num_frames());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioPacket::CopyFrom(const AudioPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AudioPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPacket::IsInitialized() const {
  return true;
}

void AudioPacket::InternalSwap(AudioPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.captured_audio_, lhs_arena,
      &other->_impl_.captured_audio_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioPacket, _impl_.num_frames_)
      + sizeof(AudioPacket::_impl_.num_frames_)
      - PROTOBUF_FIELD_OFFSET(AudioPacket, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_audio_5fcapture_5fservice_2eproto_getter, &descriptor_table_audio_5fcapture_5fservice_2eproto_once,
      file_level_metadata_audio_5fcapture_5fservice_2eproto[1]);
}

// ===================================================================

class Availability::_Internal {
 public:
};

Availability::Availability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Availability)
}
Availability::Availability(const Availability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Availability* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:Availability)
}

inline void Availability::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Availability::~Availability() {
  // @@protoc_insertion_point(destructor:Availability)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Availability::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Availability::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Availability::Clear() {
// @@protoc_insertion_point(message_clear_start:Availability)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Availability::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AvailabilityStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::AvailabilityStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Availability::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Availability)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .AvailabilityStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Availability)
  return target;
}

size_t Availability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Availability)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AvailabilityStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Availability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Availability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Availability::GetClassData() const { return &_class_data_; }


void Availability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Availability*>(&to_msg);
  auto& from = static_cast<const Availability&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Availability)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Availability::CopyFrom(const Availability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Availability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Availability::IsInitialized() const {
  return true;
}

void Availability::InternalSwap(Availability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Availability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_audio_5fcapture_5fservice_2eproto_getter, &descriptor_table_audio_5fcapture_5fservice_2eproto_once,
      file_level_metadata_audio_5fcapture_5fservice_2eproto[2]);
}

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_audio_5fcapture_5fservice_2eproto_getter, &descriptor_table_audio_5fcapture_5fservice_2eproto_once,
      file_level_metadata_audio_5fcapture_5fservice_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProcessToCapture*
Arena::CreateMaybeMessage< ::ProcessToCapture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcessToCapture >(arena);
}
template<> PROTOBUF_NOINLINE ::AudioPacket*
Arena::CreateMaybeMessage< ::AudioPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AudioPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::Availability*
Arena::CreateMaybeMessage< ::Availability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Availability >(arena);
}
template<> PROTOBUF_NOINLINE ::Empty*
Arena::CreateMaybeMessage< ::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Empty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
